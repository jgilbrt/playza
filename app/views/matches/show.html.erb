<head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/2.1.3/TweenMax.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/winwheel@2.7.0/Winwheel.min.js"></script>
</head>
<h2>Game Hub: <%= @match.opponent_name %> - <%= @match.date.strftime("%b %d, %Y %H:%M") %></h2>

<div id="score-or-countdown" class="mb-4">
  <% if @match.has_happened %>
    <p><strong>Score Line:</strong> <%= @match.score_own %> - <%= @match.score_opponent %></p>
  <% else %>
    <p><strong>Time to game:</strong> <span id="countdownTimer">Loading...</span></p>
  <% end %>
</div>

<!-- Lineup Picker -->
<div>
  <h3>Lineup Picker</h3>
  <%= form_with url: lineup_match_path(@match), method: :post, local: true do |f| %>
    <p>Select 11 starters and 5 substitutes:</p>
    <div class="row">
      <div class="col-md-6">
        <h5>Starters (11)</h5>
        <% 11.times do |i| %>
          <div class="mb-2">
            <select name="lineup[starters][]" class="form-select" required>
              <option value="">Select Player</option>
              <% @team_players.each do |p| %>
                <option value="<%= p.id %>" <%= @lineup_starters[i] == p.id ? 'selected' : '' %>><%= p.name %> (<%= p.email %>)</option>
              <% end %>
            </select>
          </div>
        <% end %>
      </div>

      <div class="col-md-6">
        <h5>Substitutes (5)</h5>
        <% 5.times do |i| %>
          <div class="mb-2">
            <select name="lineup[substitutes][]" class="form-select" required>
              <option value="">Select Player</option>
              <% @team_players.each do |p| %>
                <option value="<%= p.id %>" <%= @lineup_substitutes[i] == p.id ? 'selected' : '' %>><%= p.name %> (<%= p.email %>)</option>
              <% end %>
            </select>
          </div>
        <% end %>
      </div>
    </div>

    <%= f.submit "Save Lineup", class: "btn btn-primary mt-3" %>
  <% end %>
</div>

<% if @match.has_happened %>
  <!-- Scorers Picker -->
  <div class="mt-4">
    <h3>Assign Scorers</h3>
    <%= form_with url: scorers_match_path(@match), method: :post, local: true do |f| %>
      <div id="scorersContainer">
        <p>Your Team Score: <%= @match.score_own %></p>
        <% @match.score_own.times do |i| %>
          <select name="scorers[player_ids][]" class="form-select mb-2" required>
            <option value="">Select Scorer</option>
            <% @team_players.each do |p| %>
              <option value="<%= p.id %>" <%= @match.scorer_ids[i] == p.id ? 'selected' : '' %>><%= p.name %></option>
            <% end %>
          </select>
        <% end %>
      </div>
      <%= f.submit "Save Scorers", class: "btn btn-primary" %>
    <% end %>
  </div>

  <!-- Dick of the Day Picker -->
  <div class="mt-4">
    <h3>Dick of the Day</h3>
    <button class="btn btn-warning" id="openDickModalBtn">Choose Dick of the Day</button>
    <p id="dickResult" class="mt-2">
      <% if @match.dick_of_the_day_player %>
        <strong><%= @match.dick_of_the_day_player.name %></strong> - <%= @match.dick_of_the_day_item %>
      <% else %>
        No one chosen yet.
      <% end %>
    </p>
  </div>

  <!-- Dick Modal -->
  <div class="modal fade" id="dickModal" tabindex="-1" aria-labelledby="dickModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content p-3">
        <div class="modal-header">
          <h5 class="modal-title" id="dickModalLabel">Spin the Wheel - Dick of the Day</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <%= form_with url: dick_of_the_day_match_path(@match), method: :post, local: true, id: 'dickForm' do |f| %>
            <label for="dickPlayerSelect">Select Player:</label>
            <select name="dick[player_id]" id="dickPlayerSelect" class="form-select mb-3" required>
              <option value="">Select Player</option>
              <% @team_players.each do |p| %>
                <option value="<%= p.id %>"><%= p.name %></option>
              <% end %>
            </select>

            <canvas id="dickWheelCanvas" width="400" height="400" style="display: block; margin: 0 auto;"></canvas>

            <input type="hidden" name="dick[item]" id="dickItemInput">
            <button type="button" id="spinWheelBtn" class="btn btn-danger" disabled>Spin the Wheel</button>
            <div id="wheelResult" class="mt-3" style="font-weight:bold; font-size:1.2rem;"></div>
            <%= f.submit "Save Result", class: "btn btn-success mt-3", id: "saveDickBtn", style: "display:none;" %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
<% else %>
  <p class="mt-4 text-muted"><em>Dick of the Day feature unlocks after the match has happened.</em></p>
<% end %>

<script src="/assets/controllers/Winwheel.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // --- Countdown Timer (only if match not happened) ---
  <% unless @match.has_happened %>
  function countdown() {
    const targetDate = new Date("<%= @match.date.iso8601 %>");
    const now = new Date();
    let diff = targetDate - now;

    if (diff <= 0) {
      document.getElementById("countdownTimer").textContent = "Game time!";
      return;
    }

    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    diff -= days * (1000 * 60 * 60 * 24);

    const hours = Math.floor(diff / (1000 * 60 * 60));
    diff -= hours * (1000 * 60 * 60);

    const minutes = Math.floor(diff / (1000 * 60));
    diff -= minutes * (1000 * 60);

    const seconds = Math.floor(diff / 1000);

    document.getElementById("countdownTimer").textContent = `${days}d ${hours}h ${minutes}m ${seconds}s`;

    setTimeout(countdown, 1000);
  }
  countdown();
  <% end %>

  // --- Modal & UI Elements ---
  const dickPlayerSelect = document.getElementById("dickPlayerSelect");
  const spinWheelBtn = document.getElementById("spinWheelBtn");
  const wheelResult = document.getElementById("wheelResult");
  const dickItemInput = document.getElementById("dickItemInput");
  const saveDickBtn = document.getElementById("saveDickBtn");
  const dickModalElement = document.getElementById('dickModal');
  let dickModal;

  if (dickModalElement) {
    dickModal = new bootstrap.Modal(dickModalElement);
  }

  document.getElementById("openDickModalBtn")?.addEventListener("click", () => {
    wheelResult.textContent = "";
    dickItemInput.value = "";
    if (dickPlayerSelect) dickPlayerSelect.value = "";
    if (spinWheelBtn) spinWheelBtn.disabled = true;
    if (saveDickBtn) saveDickBtn.style.display = "none";
    dickModal?.show();
  });

  dickPlayerSelect?.addEventListener("change", () => {
    if (spinWheelBtn) spinWheelBtn.disabled = !dickPlayerSelect.value;
    wheelResult.textContent = "";
    dickItemInput.value = "";
    if (saveDickBtn) saveDickBtn.style.display = "none";
  });

  // --- Winwheel Setup ---
  const items = <%= @spin_wheel_items.to_json.html_safe %>;
  let theWheel = null;

  function getRandomColor() {
    return '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');
  }

  if (!items || !Array.isArray(items) || items.length === 0) {
    console.error("Spin wheel items array is empty or invalid:", items);
  } else {
    function createWheel(items) {
      const segments = items.map(item => ({ fillStyle: getRandomColor(), text: item }));
      theWheel = new Winwheel({
        'canvasId': 'dickWheelCanvas',
        'numSegments': items.length,
        'segments': segments,
        'animation': {
          'type': 'spinToStop',
          'duration': 5,
          'spins': 8,
          'callbackFinished': alertPrize
        }
      });
    }

    function alertPrize(indicatedSegment) {
      const pickedItem = indicatedSegment.text;
      const playerName = dickPlayerSelect?.options[dickPlayerSelect.selectedIndex]?.text || "Player";

      if (wheelResult) wheelResult.textContent = `${playerName} has to ${pickedItem}`;
      if (dickItemInput) dickItemInput.value = pickedItem;
      if (saveDickBtn) saveDickBtn.style.display = "inline-block";
    }

    createWheel(items);

    spinWheelBtn?.addEventListener("click", () => {
      if (theWheel) {
        theWheel.stopAnimation(false);
        theWheel.rotationAngle = 0;
        theWheel.startAnimation();
        if (saveDickBtn) saveDickBtn.style.display = "none";
        wheelResult.textContent = "";
        dickItemInput.value = "";
      }
    });
  }
});
</script>
